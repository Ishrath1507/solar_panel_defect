# -*- coding: utf-8 -*-
"""Solar Panel Defect Classification Web App.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ycVvQm0VWRDyu-HL3-CyPnLUSEhLPnMS
"""

!pip install -q streamlit

!pip install pyngrok

!./ngrok authtoken 256itPUEkCjes6hzJz3MoG3yIm4_5UWfXGRJHWXNsAgKYidkr

!SHOW CODE

#from google.colab import drive 
#drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# %%writefile score.py
# 
# 
# import tensorflow as tf
# import numpy as np
# import streamlit as st
# from PIL import Image 
# import requests 
# from io import BytesIO
# 
# 
# st.set_option('deprecation.showfileUploaderEncoding',False)
# st.title("Solar Panel Classifier")
# st.text("Provide URL of Solar Image for image classification ")
# 
# 
# @st.cache(allow_output_mutation = True)
# def load_model():
#   model = tf.keras.models.load_model('/content/drive/MyDrive/Model')
#   return model
# 
# 
#   with st.spinner('Loading Model into Memory....'):
#     model = load_model()
# 
# 
#     classses = ['Defect','No Defect']
#     
# 
#     def scale(image):
#       image = tf.cast(image,tf.float32)
#       image /= 255.0
# 
#       return tf.image.resize(image,[224,224])
# 
#       def decode_img(image):
#         img = tf.image.decode_jpeg(image, channels=3)
#         img = scale(img)
#         return np.expand_dims(img, axis=0)
# 
#         path = st.text_input('Enter Image URL to classify...','https://www.google.com/imgres?imgurl=https%3A%2F%2Fm.economictimes.com%2Fthumb%2Fmsid-69130611%2Cwidth-1200%2Cheight-900%2Cresizemode-4%2Cimgsize-472342%2Fpolycrystalline-solar-panels-cheap-yet-efficient-long-lasting-solar-panels.jpg&imgrefurl=https%3A%2F%2Feconomictimes.indiatimes.com%2Fsmall-biz%2Fproductline%2Fpower-generation%2Fpolycrystalline-solar-panels-cheap-yet-efficient-long-lasting-solar-panels%2Farticleshow%2F69130611.cms&tbnid=y3uNmCk-KtRECM&vet=12ahUKEwiT-8Ow3f_1AhXFiNgFHQvkD88QMygEegUIARDfAQ..i&docid=BgCaZTbmlJA_EM&w=1200&h=900&q=solar%20panel%20image&ved=2ahUKEwiT-8Ow3f_1AhXFiNgFHQvkD88QMygEegUIARDfAQ')
#         if path is not None:
#           content = requests.get(path).content
# 
#           st.write("Predicted: ")
#           with st.spinner('classifying......'):
#             label = np.argmax(model.predict(decode_img(content)),axis=1)
#             st.write(classes[label[0]])
#             st.write("")
#             image = Image.open(BytesIO(content))
#             st.image(image, caption='Classifying Solar Panel Image ', use_column_width = True)
# 
# 
# 
# 
# 
# 
#

!nohup streamlit run score.py &

from pyngrok import ngrok


url = ngrok.connect(port=8501)
url

!cat nohup.out

